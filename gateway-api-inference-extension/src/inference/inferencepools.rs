// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --schema=derived --derive=JsonSchema --derive=Default --derive=PartialEq --docs -f -
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use k8s_openapi::api::core::v1::ObjectReference;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// InferencePoolSpec defines the desired state of InferencePool
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema, Default, PartialEq)]
#[kube(
    group = "inference.networking.x-k8s.io",
    version = "v1alpha2",
    kind = "InferencePool",
    plural = "inferencepools"
)]
#[kube(namespaced)]
#[kube(status = "InferencePoolStatus")]
#[kube(derive = "Default")]
#[kube(derive = "PartialEq")]
pub struct InferencePoolSpec {
    /// Extension configures an endpoint picker as an extension service.
    #[serde(rename = "extensionRef")]
    pub extension_ref: InferencePoolExtensionRef,
    /// Selector defines a map of labels to watch model server pods
    /// that should be included in the InferencePool.
    /// In some cases, implementations may translate this field to a Service selector, so this matches the simple
    /// map used for Service selectors instead of the full Kubernetes LabelSelector type.
    /// If sepecified, it will be applied to match the model server pods in the same namespace as the InferencePool.
    /// Cross namesoace selector is not supported.
    pub selector: BTreeMap<String, String>,
    /// TargetPortNumber defines the port number to access the selected model servers.
    /// The number must be in the range 1 to 65535.
    #[serde(rename = "targetPortNumber")]
    pub target_port_number: i32,
}

/// Extension configures an endpoint picker as an extension service.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema, Default, PartialEq)]
pub struct InferencePoolExtensionRef {
    /// Configures how the gateway handles the case when the extension is not responsive.
    /// Defaults to failClose.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "failureMode"
    )]
    pub failure_mode: Option<InferencePoolExtensionRefFailureMode>,
    /// Group is the group of the referent.
    /// The default value is "", representing the Core API group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// Kind is the Kubernetes resource kind of the referent. For example
    /// "Service".
    ///
    /// Defaults to "Service" when not specified.
    ///
    /// ExternalName services can refer to CNAME DNS records that may live
    /// outside of the cluster and as such are difficult to reason about in
    /// terms of conformance. They also may not be safe to forward to (see
    /// CVE-2021-25740 for more information). Implementations MUST NOT
    /// support ExternalName Services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name is the name of the referent.
    pub name: String,
    /// The port number on the service running the extension. When unspecified,
    /// implementations SHOULD infer a default value of 9002 when the Kind is
    /// Service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "portNumber"
    )]
    pub port_number: Option<i32>,
}

/// Extension configures an endpoint picker as an extension service.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema, PartialEq)]
pub enum InferencePoolExtensionRefFailureMode {
    FailOpen,
    FailClose,
}

/// InferencePoolStatus defines the observed state of InferencePool
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema, Default, PartialEq)]
pub struct InferencePoolStatus {
    /// Parents is a list of parent resources (usually Gateways) that are
    /// associated with the route, and the status of the InferencePool with respect to
    /// each parent.
    ///
    /// A maximum of 32 Gateways will be represented in this list. An empty list
    /// means the route has not been attached to any Gateway.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<Vec<InferencePoolStatusParent>>,
}

/// PoolStatus defines the observed state of InferencePool from a Gateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema, Default, PartialEq)]
pub struct InferencePoolStatusParent {
    /// Conditions track the state of the InferencePool.
    ///
    /// Known condition types are:
    ///
    /// * "Accepted"
    /// * "ResolvedRefs"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// GatewayRef indicates the gateway that observed state of InferencePool.
    #[serde(rename = "parentRef")]
    pub parent_ref: ObjectReference,
}

/// GatewayRef indicates the gateway that observed state of InferencePool.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema, Default, PartialEq)]
pub struct InferencePoolStatusParentParentRef {
    /// API version of the referent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "apiVersion"
    )]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceVersion"
    )]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}
